 //New code for log api
	  public static List<FilesAndFoldersVO> fetchLastFewCommits(String fromDate,String toDate) throws IOException, NoHeadException, GitAPIException{
		  List<FilesAndFoldersVO> commitedFilesList = new ArrayList<FilesAndFoldersVO>();
		  try{
			  String localRepo = "/Users/vishal/Vishal/M/git-repo";
			  Repository repository = openJGitRepository(localRepo);
			  ObjectId head = repository.resolve("HEAD");
			  Git git = new Git(repository);
			  Iterable<RevCommit> commits ;
			  
			  if(fromDate != "" && fromDate.trim().length() > 0 && toDate != "" && toDate.trim().length() > 0){
				  System.out.println("Filter by dates");
				  SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
				  Date since = sdf.parse(fromDate);
				  Date until = sdf.parse(toDate);
				  RevFilter aFilter = CommitTimeRevFilter.between(since, until);
				  System.out.println("Revfilter::::"+aFilter);
				  commits = git.log().add(head).setRevFilter(aFilter).call();
			  }else{
				  System.out.println("Filter by last 10 commits");
				  commits = git.log().add(head).setMaxCount(10).call();
			  }
			  
			  for (RevCommit revCommit : commits) {
					RevTree tree = revCommit.getTree();
	                List<FilesAndFoldersVO> filesList = printFile(repository,tree,revCommit);
	                commitedFilesList.addAll(filesList);
			  }
			  
			  /*Iterable<RevCommit> commits = git.log().add(head).setMaxCount(2).call();
			  for (RevCommit revCommit : commits) {
				  	count++;
					System.out.print("##################:::"+count+":::##################");
					System.out.print("\r\n");
					RevTree tree = revCommit.getTree();
	                List<FilesAndFoldersVO> filesList = printFile(repository,tree,revCommit);
	                commitedFilesList.addAll(filesList);
			  }*/
			  System.out.println("commitedFilesList :::::"+commitedFilesList.size());
		  }catch(Exception e){
			  throw new IOException("Failed to fetchLastFewCommits");
		  }
		  return commitedFilesList;
	  }
	  
	  private static List<FilesAndFoldersVO> printFile(Repository repository, RevTree tree,RevCommit revCommit) throws IOException {
		  List<FilesAndFoldersVO> filesList = new ArrayList<FilesAndFoldersVO>();
	        try (TreeWalk treeWalk = new TreeWalk(repository)) {
	            treeWalk.addTree(tree);
	            treeWalk.setRecursive(false);
	            if (!treeWalk.next()) {
	                throw new IllegalStateException("Did not find expected file 'README.md'");
	            }
	            while (treeWalk.next()) {
	            	FilesAndFoldersVO file = new FilesAndFoldersVO();
	                if (treeWalk.isSubtree()) {
	                    System.out.println("Is a directory: " + treeWalk.getPathString());
	                    treeWalk.enterSubtree();
	                } else {
	                	System.out.println("Is a File: " + treeWalk.getPathString());
	 					/*System.out.print(";Commit Message: " + revCommit.getShortMessage());
	 				    System.out.print("; Author: " + revCommit.getAuthorIdent().getName());
	 				    System.out.print("; Committer: " + revCommit.getCommitterIdent().getName());
	 				    */
	 				    long commitTime = new Long(revCommit.getCommitTime()) * 1000;
	 				    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss");
	 				    //System.out.print("; Commit Time: " + sdf.format(commitTime));
	 				    //System.out.print("\r\n");
	 				    file.setName(treeWalk.getPathString());
	 				    file.setPath(treeWalk.getPathString());
	                	file.setAuthorName(revCommit.getAuthorIdent().getName());
	                	file.setDirectory(false);
	                	file.setMessage(revCommit.getShortMessage());
	                	file.setModifiedDate(sdf.format(commitTime));
	                	file.setSelected(false);
	                	file.setType("FILE");
	                	filesList.add(file);
	                }
	            }
	        }
	        System.out.println("Files list length::::"+filesList.size());
	        return filesList;
	    }




//component


import { Component, OnInit } from '@angular/core';
import {JgitService} from '../../../shared/service/jgit.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-files-by-commit',
  templateUrl: './files-by-commit.component.html',
  styleUrls: ['./browse-files.component.css']
})
export class FilesByCommit{

  constructor(private jgitService:JgitService,private _route : Router) {}

  filesList:any[];
  selectedFilesList:any[]=[];
  fromDate:string;
  toDate:string;
  

  ngOnInit() {
    console.log("ng on init method of browse file component"+this.selectedFilesList.length);
    this.fromDate="";
    this.toDate="";
    this.jgitService.fetchFilesByCommit(this.fromDate,this.toDate).subscribe(b => this.filesList = b);
  }

  addSelectedFiles(){
    console.log("selected::::::"+JSON.stringify(this.filesList));
    if(this.filesList.length > 0){
      for(var i=0;i<this.filesList.length;i++){
        var fileObj = this.filesList[i];
        if(fileObj.selected && !fileObj.isAdded){
          fileObj.isAdded=true;
          this.jgitService.addSelectedFilesToList(fileObj);
          this.selectedFilesList.push(fileObj);
        }
      }
    }
   }

  redirectToRelease(){
    console.log("navigating to add files");
    this._route.navigate(["/addRelease"]);
  }

  removeFileFromList(index:any,path:any){
    this.jgitService.removeItemFromList(index);
    this.selectedFilesList.splice(index, 1); 

    for(var i=0;i<this.filesList.length;i++){
      var fileObj = this.filesList[i];
      if(path == fileObj.path){
        fileObj.isAdded=false;
        fileObj.selected=false;
      }
    }
  }

  fetchFilesByDate(){
    console.log("Inside fetchFilesByDate ::::::"+this.fromDate+":::::"+this.toDate);
    this.jgitService.fetchFilesByCommit(this.fromDate,this.toDate).subscribe(b => this.filesList = b);
  }

}



//html


<div class="row">
    <div class="col-md-7">
    <div id="tabsJustifiedContent" class="tab-content">
            <div id="relaseId" class="tab-pane fade active show release-manage-container">
                
                <div class="file-browse-container">
                        <div>
                                <h3>Select Dates</h3>
                                <div class="row "> 
                                    <div class="col-md-4">From:</div>
                                    <div class="col-md-8"><input type="text" [(ngModel)]="fromDate"/></div>
                                </div>
                                <div class="row "> 
                                    <div class="col-md-4">To:</div>
                                    <div class="col-md-8"><input type="text" [(ngModel)]="toDate"/></div>
                                </div>

                                <div class="btn-action-section">
                                        <div>
                                            <button type="button" class="btn btn-primary" (click)="fetchFilesByDate()">Filter</button>
                                            <button type="button" class="btn btn-info">Reset</button>
                                        </div>
                                </div>
                        </div>
                    
                   
                    <h3>Select Files</h3>
                    <ul>
                            <li *ngFor="let file of filesList">
                                    <i class="glyphicon glyphicon-ok"></i>
                                    <input type="checkbox" [(ngModel)]="file.selected" *ngIf="!file.directory">
                                    <label *ngIf="!file.directory"><i class="fa fa-file-code fa-2x" aria-hidden="true"></i>{{file.path}}</label>
                            </li>
                            <li *ngIf="filesList != undefined && filesList.length == 0">
                                <label>No Files Available for the applied filter</label>
                            </li>
                    </ul>
                    <div class="btn-action-section">
                            <div>
                                    <button type="button" class="btn btn-primary" (click)="addSelectedFiles()">Add</button>
                                    <button type="button" class="btn btn-info" (click)="redirectToRelease()">Cancel</button>
                            </div>
                    </div>
                </div>
            </div>
    </div>
    </div>
    
        <div class="col-md-5 file-browse-container">
                <h3>Selected Files</h3>
                <div class="release-manage-tbl">
                        
                    <table class="table">
                        <thead>
                            <tr>
                                <th>File Path</th>
                                <th>Remove</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr *ngFor="let sel of selectedFilesList; let idx = index">
                                <td>{{sel.path}}</td>
                                <td><i class="fas fa-times-circle" (click)="removeFileFromList(idx,sel.path)"></i></td>
                            </tr>
                        </tbody>
                    </table>
                 </div>
    
                 <div class="btn-action-section">
                        <div>
                            <button type="button" class="btn btn-primary" (click)="redirectToRelease()">Ok</button>
                            <button type="button" class="btn btn-info" (click)="redirectToRelease()">Cancel</button>
                        </div>
                </div>
        </div>
    </div>



    //jgit service

    fetchFilesByCommit(fromDate:string,toDate:string):Observable<any[]>{
        console.log("fetchFilesByCommit method of JgitService"+JgitService.API_URL);
        return this._http.get<any[]>(JgitService.API_URL+"ReadFiles/listFilesByCommit?fromDate="+fromDate+"&toDate="+toDate);
    }